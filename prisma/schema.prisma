generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum CURRENCY {
  NGN
  USD
}

enum GENDER {
  MALE
  FEMALE
  OTHERS
}

enum USER_TYPE {
  ADMIN
  AGENT // agent/property owners
  ARTISAN
  VENDOR
  BUYER // same as user
}

enum AUTH_PROVIDER {
  GOOGLE
  EMAIL
}

enum PROVIDER {
  CLOUDINARY
  SELF_HOSTED
  GOOGLE
  OTHERS
}

enum LISTING_TYPE {
  RENT
  SALE
  HOTEL
  SHORTLET
}

enum FILE_TYPE {
  IMAGE
  VIDEO
  OTHERS
  DOCUMENT
}

enum PROPERTY_STATUS {
  AVAILABLE
  NOT_AVAILABLE
  SOLD
}

enum FURNISHING {
  SEMI_FURNISHED
  FURNISHED
  UNFURNISHED
}

enum SUBSCRIPTION_MODEL {
  FREE
  SILVER
  GOLD
  BASIC
  PREMIUM
}

enum DURATION {
  MONTHLY
  YEARLY
  ONE_OFF
}

enum PRODUCT_TYPE {
  PROPERTY
  PRODUCT
  SERVICES
}

enum TRANSACTION_TYPE {
  SUBSCRIPTION
}

enum TRANSACTION_STATUS {
  INITIAL
  PENDING
  FAILED
  SUCCESS
  UNKNOWN
}

model otp {
  id        Int      @unique @default(autoincrement())
  uuid      String   @id @unique @default(cuid())
  code      String
  email     String
  expiresIn String   @default("5m") // m for mins, h for hours
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model businessInfo {
  uuid String @id @unique @default(cuid())

  name      String
  phone     String?
  address   address  @relation(fields: [addressId], references: [uuid])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  addressId String
  user      user[]
  cac       file?    @relation(fields: [fileId], references: [uuid])
  fileId    String?
}

model restriction {
  uuid String @id @unique @default(cuid())

  restricted Boolean  @default(false)
  reason     String   @db.VarChar(255)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       user[]
}

model user {
  uuid         String        @id @unique @default(cuid())
  email        String        @unique
  firstName    String?
  lastName     String?
  phone        String?
  skills       String?
  bio          String?
  gallery      file[]        @relation("gallery")
  business     businessInfo? @relation(fields: [businessInfoId], references: [uuid])
  gender       GENDER?
  type         USER_TYPE     @default(BUYER)
  root         Boolean       @default(false)
  authProvider AUTH_PROVIDER

  verified    Boolean      @default(false)
  restriction restriction? @relation(fields: [restrictionid], references: [uuid])
  fileId      String?
  govtFileId  String?
  avatar      file?        @relation("profilePhoto", fields: [fileId], references: [uuid])
  govtId      file?        @relation("govtId", fields: [govtFileId], references: [uuid])

  // password
  password password? @relation(fields: [keyId], references: [uuid])
  keyId    String?

  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  property       property[]
  businessInfoId String?
  subscription   subscription? @relation(fields: [subscriptionId], references: [uuid])
  subscriptionId String?
  restrictionid  String?
  reviews        reviews[]
  viewed         property[]    @relation("viewed")
}

model file {
  id   Int    @unique @default(autoincrement())
  uuid String @id @unique @default(cuid())
  src  String

  file_id  String?
  type     FILE_TYPE @default(OTHERS)
  provider PROVIDER  @default(SELF_HOSTED)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user          user[]         @relation("profilePhoto")
  govtIdUsers   user[]         @relation("govtId")
  property      property?      @relation(fields: [propertyId], references: [uuid])
  propertyId    String?
  propertyVideo property[]     @relation("videoTour")
  businessInfo  businessInfo[]
  artisan       user?          @relation("gallery", fields: [artisanId], references: [uuid])
  artisanId     String?
  ads           ad[]
}

model password {
  id   Int    @unique @default(autoincrement())
  uuid String @id @unique @default(cuid())

  content String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user user[]
}

model propertyType {
  id   Int    @unique @default(autoincrement())
  uuid String @id @unique @default(cuid())

  name String

  property   property? @relation(fields: [propertyId], references: [uuid])
  propertyId String?

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model subscription {
  id      Int                @unique @default(autoincrement())
  uuid    String             @id @unique @default(cuid())
  ref     String?
  userRef String?
  type    SUBSCRIPTION_MODEL @default(FREE)

  expired  Boolean  @default(false)
  duration DURATION @default(MONTHLY)
  price    Float    @default(0)

  active Boolean @default(false)

  users         user[]
  updatedAt     DateTime      @updatedAt
  nextPaymentAt DateTime?
  createdAt     DateTime      @default(now())
  transaction   transaction[]
}

model transaction {
  id             Int                @unique @default(autoincrement())
  uuid           String             @id @unique @default(cuid())
  type           TRANSACTION_TYPE   @default(SUBSCRIPTION)
  userEmail      String
  fee            Float              @default(0)
  status         TRANSACTION_STATUS @default(INITIAL)
  sub            subscription       @relation(fields: [subscriptionId], references: [uuid])
  subscriptionId String
  idAddress      String?
  planCode       String?
  paidAt         DateTime?
  updatedAt      DateTime           @updatedAt
  createdAt      DateTime           @default(now())
}

model address {
  id   Int    @unique @default(autoincrement())
  uuid String @id @unique @default(cuid())

  longitude Float?
  latitude  Float?

  address String
  city    String?
  state   String?
  zipCode String?

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  businessInfo businessInfo[]
  property     property[]
}

model specifications {
  id   Int    @unique @default(autoincrement())
  uuid String @id @unique @default(cuid())

  bedrooms   Int?
  bathrooms  Int?
  squareFeet String?
  lotSize    String?
  yearBuilt  String? // year it was built
  furnishing FURNISHING @default(UNFURNISHED)

  parkingSpaces Int     @default(0)
  gym           Boolean @default(false)
  garden        Boolean @default(false)

  pool Boolean @default(false)

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  property  property[]
}

model tag {
  id         Int       @unique @default(autoincrement())
  uuid       String    @id @unique @default(cuid())
  name       String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  property   property? @relation(fields: [propertyId], references: [uuid])
  propertyId String?
}

model reviews {
  id     Int    @unique @default(autoincrement())
  uuid   String @id @unique @default(cuid())
  rating Int    @default(1)
  user   user?  @relation(fields: [userId], references: [uuid])

  title   String
  content String? @db.Text

  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  property   property? @relation(fields: [propertyId], references: [uuid])
  propertyId String?
  userId     String?
}

model property {
  id          Int      @unique @default(autoincrement())
  uuid        String   @id @unique @default(cuid())
  marketplace Boolean  @default(false)
  agent       user     @relation(fields: [userId], references: [uuid])
  price       Decimal
  address     address? @relation(fields: [addressId], references: [uuid])

  phone    String?
  type     PRODUCT_TYPE @default(PROPERTY)
  moreInfo String?      @db.LongText

  specifications    specifications? @relation(fields: [specificationsId], references: [uuid])
  hasLegalDocuments Boolean         @default(false)
  images            file[]
  videoTour         file?           @relation("videoTour", fields: [tourFileId], references: [uuid])
  title             String

  reviews reviews[]

  views    user[]   @relation("viewed")
  currency CURRENCY @default(NGN)
  tags     tag[]

  description String? @db.LongText

  propertyType propertyType[] // commercial,  appartment,  etc

  listingType LISTING_TYPE
  status      PROPERTY_STATUS @default(AVAILABLE)

  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  tourFileId       String?
  userId           String
  specificationsId String?
  addressId        String?
}

model ad {
  id   Int    @unique @default(autoincrement())
  uuid String @id @unique @default(cuid())

  title       String?
  description String?

  link String?

  image file? @relation(fields: [fileId], references: [uuid])

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
  fileId    String?
}
